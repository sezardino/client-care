generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRoles {
  ADMIN
  OWNER
  MEMBER
}

model User {
  id        String @id @unique @default(cuid())
  email     String @unique
  firstName String @default("") @map("first_name")
  lastName  String @default("") @map("last_name")
  position  String @default("")

  inviteId String? @default(cuid()) @map("invite_id")

  role UserRoles @default(OWNER)

  avatar   File?   @relation(fields: [avatarId], references: [id])
  avatarId String? @map("avatar_id")

  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization-members")
  organizationId String?       @map("organization_id")

  owner Organization? @relation("organization-owner")

  updatedAt DateTime  @updatedAt @map("updated_at")
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("users")
}

model File {
  id         String @id @default(uuid())
  path       String
  fullPath   String @map("full_path")
  publicPath String @map("public_path")

  avatar  User[]
  logo    Organization[]
  project Project[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("files")
}

model Organization {
  id   String @id @unique @default(cuid())
  slug String @unique

  name  String
  extra String @default("")

  members User[] @relation("organization-members")
  ownerId String @unique @map("owner_id")
  owner   User   @relation("organization-owner", fields: [ownerId], references: [id])

  projects Project[]
  widget   Widget[]

  logo   File?   @relation(fields: [logoId], references: [id])
  logoId String? @map("logo_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("organizations")
}

model Project {
  id   String @id @unique @default(cuid())
  slug String
  name String
  url  String @default("")

  description String @default("")

  widget Widget[]

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])

  logo   File?   @relation(fields: [logoId], references: [id])
  logoId String? @map("logo_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("projects")
}

enum WidgetType {
  FEEDBACK
}

model Widget {
  id   String     @id @default(cuid())
  name String
  slug String     @unique
  type WidgetType

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id])

  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id])

  submissions Submission[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("widgets")
}

model Submission {
  id String @id @default(cuid())

  widget   Widget @relation(fields: [widgetId], references: [id])
  widgetId String

  feedback   Feedback? @relation(fields: [feedbackId], references: [id])
  feedbackId String?   @map("feedback_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("submissions")
}

model Feedback {
  id String @id @default(cuid())

  fullName String @map("full_name")
  email    String
  message  String
  rating   Int

  submission Submission[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("feedbacks")
}
